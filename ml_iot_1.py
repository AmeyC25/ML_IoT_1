# -*- coding: utf-8 -*-
"""ML_IoT_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OUUBt5jJ62KMhpwo1eSizFYln4SJ612g
"""

# ML_IoT_1

pip install opencv-python
import cv2
import numpy as np

# Load pre-trained YOLO model and classes
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
classes = []
with open("coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]

layer_names = net.getUnconnectedOutLayersNames()

# Load the drone video
video_path = "path/to/your/drone_video.mp4"
cap = cv2.VideoCapture(video_path)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    height, width, _ = frame.shape

    # Convert the frame to a blob
    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(layer_names)

    class_ids = []
    confidences = []
    boxes = []

    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5 and classes[class_id] == "chinkara":
                center_x, center_y, w, h = (detection[0:4] * np.array([width, height, width, height])).astype('int')
                x, y = int(center_x - w / 2), int(center_y - h / 2)
                class_ids.append(class_id)
                confidences.append(float(confidence))
                boxes.append([x, y, w, h])

    indices = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    for i in indices:
        i = i[0]
        box = boxes[i]
        x, y, w, h = box
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    cv2.imshow("Chinkara Detection", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()


# working example- implementation of the given code can be done by the following template
import os

yolo_directory = "yolov3_files"
os.makedirs(yolo_directory, exist_ok=True)
import wget

# YOLOv3 weights file
weights_url = "https://pjreddie.com/media/files/yolov3.weights"
weights_file = os.path.join(yolo_directory, "yolov3.weights")
wget.download(weights_url, weights_file)

# YOLOv3 configuration file
config_url = "https://github.com/pjreddie/darknet/blob/master/cfg/yolov3.cfg?raw=true"
config_file = os.path.join(yolo_directory, "yolov3.cfg")
wget.download(config_url, config_file)

# YOLOv3 class names file
names_url = "https://github.com/pjreddie/darknet/blob/master/data/coco.names?raw=true"
names_file = os.path.join(yolo_directory, "coco.names")
wget.download(names_url, names_file)
import cv2
import numpy as np

# Load pre-trained YOLO model and classes
net = cv2.dnn.readNet(os.path.join(yolo_directory, "yolov3.weights"), os.path.join(yolo_directory, "yolov3.cfg"))
classes = []
with open(os.path.join(yolo_directory, "coco.names"), "r") as f:
    classes = [line.strip() for line in f.readlines()]

layer_names = net.getUnconnectedOutLayersNames()

# Load a sample image
image_path = "path/to/your/sample_image.jpg"
frame = cv2.imread(image_path)

height, width, _ = frame.shape

# Convert the frame to a blob
blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
net.setInput(blob)
outs = net.forward(layer_names)

class_ids = []
confidences = []
boxes = []

for out in outs:
    for detection in out:
        scores = detection[5:]
        class_id = np.argmax(scores)
        confidence = scores[class_id]
        if confidence > 0.5 and classes[class_id] == "chinkara":
            center_x, center_y, w, h = (detection[0:4] * np.array([width, height, width, height])).astype('int')
            x, y = int(center_x - w / 2), int(center_y - h / 2)
            class_ids.append(class_id)
            confidences.append(float(confidence))
            boxes.append([x, y, w, h])

indices = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

for i in indices:
    i = i[0]
    box = boxes[i]
    x, y, w, h = box
    cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

cv2.imshow("Chinkara Detection", frame)
cv2.waitKey(0)
cv2.destroyAllWindows()